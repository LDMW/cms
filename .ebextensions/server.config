# This specifies the deployment process on AWS ElasticBeanstalk for a Django app using npm and Postgres.
#
# The target environment should have access to a Postgres Database through environment variables.
# The environment can be setup using `eb create --database.engine=postgres`
# The necessary environment variables to access the database will be automatically defined on the
# instances of that environment.
#
# In addition, the target environment should define environment variables (django secret key ...).
# They can be manually defined using the AWS ElasticBeanstalk interface on the web.
# They can also be specified when creating the environment from command line, for example: 
# ```
# eb create --database.engine=postgres --envvars ENVVAR1=value,ENVVAR2=value
# ```
#

#packages:
#    yum:
#        git: []
#        postgresql93-devel: []

commands:
    01_dev_tools:
        command: sudo yum groupinstall -y "Development Tools"
    02_dev_libs:
        command: sudo yum groupinstall -y "Development Libraries"
    03_gcc_alternatives:
        command: sudo alternatives --set gcc "/usr/bin/gcc48"
    04_node_install:
        cwd: /tmp
        test: '[ ! -f /usr/bin/node ] && echo "NodeJS not installed - installing"'
        command: 'curl -sL https://rpm.nodesource.com/setup_6.x | sudo -E bash - && sudo yum install -y nodejs'
    05_yuglify:
        cwd: /tmp
        test: '[ ! -f /usr/bin/yuglify ] && echo "yuglify not installed - installing"'
        command: 'sudo npm -g install yuglify'

option_settings:
    aws:elasticbeanstalk:application:environment:
        # your settings module here
        DJANGO_SETTINGS_MODULE: "cms.settings.production" 
        
#        # add the path to the root of your django app
#        # note that this is the path on the target machine
#        # EB will deploy your application in /opt/python/current on the target machines
#        PYTHONPATH: "/opt/python/current/app/server:$PYTHONPATH"
        
    aws:elasticbeanstalk:container:python:
        # path to your wsgi.py file from the root folder of your application
        WSGIPath: cms/wsgi.py
#        NumProcesses: 3 
#        NumThreads: 20
        
    "aws:elasticbeanstalk:container:python:staticfiles":
        "/staticfiles/": "staticfiles/"

# These commands will be run just before the application is started
container_commands:
    01_migrate:
        command: 'python manage.py migrate --noinput'
        leader_only: true
        
#    # You can create a "createadmin" command to create a super user automatically
#    # You can use environment variables to define the credentials of the super user
#    # If you don't use a createadmin command, delete this command.
#    02_createadmin:
#        command: 'python server/manage.py createadmin'
#        leader_only: true
    
    # You can define a build script in packages.json (using gulp, grunt...) to build your client side files
    03_npm_build:
        command: 'npm install && npm run install:elm'
        
    04_collectstatic:
        command: 'python manage.py collectstatic -c --noinput --settings $DJANGO_SETTINGS_MODULE'
