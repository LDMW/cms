# -*- coding: utf-8 -*-
# Generated by Django 1.10.7 on 2017-04-28 10:51
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion
import modelcluster.contrib.taggit
import modelcluster.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('taggit', '0002_auto_20150616_2121'),
        ('wagtailcore', '0032_add_bulk_delete_page_permission'),
    ]

    operations = [
        migrations.CreateModel(
            name='AudienceTag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CategoryTag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ContentTag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ResourcePage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
                ('heading', models.TextField(blank=True, help_text='The title of the resource being linked to')),
                ('resource_url', models.URLField(blank=True, help_text='The url of the resource to link to')),
                ('audience_tags', modelcluster.contrib.taggit.ClusterTaggableManager(blank=True, help_text='Audience tags, eg: "male", "female", "shiftworkers"', through='resources.AudienceTag', to='taggit.Tag', verbose_name='Audience Tags')),
                ('content_tags', modelcluster.contrib.taggit.ClusterTaggableManager(blank=True, help_text='Content Type tags, eg: "videos", "blogs", "free", "subscription"', through='resources.ContentTag', to='taggit.Tag', verbose_name='Content Tags')),
                ('tags', modelcluster.contrib.taggit.ClusterTaggableManager(blank=True, help_text='Category tags, eg: "insomnia", "fatigue", "snoring"', through='resources.CategoryTag', to='taggit.Tag', verbose_name='Main Tags')),
            ],
            options={
                'verbose_name': 'Resource',
            },
            bases=('wagtailcore.page',),
        ),
        migrations.AddField(
            model_name='contenttag',
            name='content_object',
            field=modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='tagged_content_items', to='resources.ResourcePage'),
        ),
        migrations.AddField(
            model_name='contenttag',
            name='tag',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='resources_contenttag_items', to='taggit.Tag'),
        ),
        migrations.AddField(
            model_name='categorytag',
            name='content_object',
            field=modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='tagged_items', to='resources.ResourcePage'),
        ),
        migrations.AddField(
            model_name='categorytag',
            name='tag',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='resources_categorytag_items', to='taggit.Tag'),
        ),
        migrations.AddField(
            model_name='audiencetag',
            name='content_object',
            field=modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='tagged_audience_items', to='resources.ResourcePage'),
        ),
        migrations.AddField(
            model_name='audiencetag',
            name='tag',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='resources_audiencetag_items', to='taggit.Tag'),
        ),
    ]
